const throwError = require("../utils/throwError");

// üîπ H√†m ti·ªán √≠ch ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
const checkRequired = (field, fieldName) => {
  if (!field || String(field).trim() === "") {
    throwError(`H√£y nh·∫≠p ${fieldName} c·ªßa b·∫°n!`, 400);
  }
};

// üîπ Validator ƒëƒÉng k√Ω
const registerValidator = (req, res, next) => {
  try {
    const { lastName, firstName, email, password, confirmPassword } = req.body;

    // --- 1Ô∏è‚É£ Ki·ªÉm tra b·∫Øt bu·ªôc ---
    checkRequired(lastName, "h·ªç");
    checkRequired(firstName, "t√™n");
    checkRequired(email, "email");
    checkRequired(password, "m·∫≠t kh·∫©u");
    checkRequired(confirmPassword, "x√°c nh·∫≠n m·∫≠t kh·∫©u");

    // --- 2Ô∏è‚É£ Ki·ªÉm tra ƒë·ªãnh d·∫°ng email ---
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throwError("Email kh√¥ng h·ª£p l·ªá!", 400);
    }

    // --- 3Ô∏è‚É£ Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u ---
    if (password.length < 6) {
      throwError("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!", 400);
    }

    // --- 4Ô∏è‚É£ Ki·ªÉm tra tr√πng kh·ªõp m·∫≠t kh·∫©u ---
    if (password !== confirmPassword) {
      throwError("M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!", 400);
    }

    next();
  } catch (error) {
    res.status(error.statusCode || 400).json({
      success: false,
      message: error.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!",
    });
  }
};

// üîπ Validator ƒëƒÉng nh·∫≠p
const loginValidator = (req, res, next) => {
  try {
    const { email, password } = req.body;

    checkRequired(email, "email");
    checkRequired(password, "m·∫≠t kh·∫©u");

    // --- 1Ô∏è‚É£ Ki·ªÉm tra ƒë·ªãnh d·∫°ng email ---
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throwError("Email kh√¥ng h·ª£p l·ªá!", 400);
    }

    next();
  } catch (error) {
    res.status(error.statusCode || 400).json({
      success: false,
      message: error.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!",
    });
  }
};

module.exports = {
  registerValidator,
  loginValidator,
};
